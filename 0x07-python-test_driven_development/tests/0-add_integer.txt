The ``0-add_integer test`` module
=================================

Using ``add_integer``
---------------------

This file is in restructured text format.
First import ``add_integer`` from the ``0-add_integer`` module:

	>>> add_integer = __import__('0-add_integer').add_integer

Checking for module docstring:
	>>> m = __import__("0-add_integer").__doc__
	>>> len(m) > 1
	True

Checking for function docstring:
	>>> f = __import__('0-add_integer').add_integer.__doc__
	>>> len(f)> 1
	True

Basic usage:

Two int values:
	>>> add_integer(3, 6)
	9

Single input:
	>>> add_integer(7)
	105

Positive with negative input:
	>>> add_integer(2, -6)
	-4

Negative with positive int:
	>>> add_integer(-7, 9)
	2

Multiple value input:
	>>> [add_integer(i, i**2) for i in range (6)]
	[0, 2, 6, 12, 20, 30]

negative int and float input:
	>>> add_integer(100.3, -6)
	94

Float NaN:
	>>> add_integer(float('NaN'))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer

Int and string input:
	>>> add_integer(5, "Holberton")
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

None input:
	>>> add_integer(None)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Double negative float:
	>>> add_integer(-100.5, -9.3)
	-109

Double string input
	>>> add_integer("holberton", "School")
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
